export default class Display {
    constructor(target: any);
    _drawCtx: CanvasRenderingContext2D;
    _renderQ: any[];
    _flushing: boolean;
    _fbWidth: number;
    _fbHeight: number;
    _prevDrawStyle: string;
    _tile: ImageData | null;
    _tile16x16: ImageData;
    _tileX: number;
    _tileY: number;
    _target: any;
    _targetCtx: any;
    _viewportLoc: {
        x: number;
        y: number;
        w: any;
        h: any;
    };
    _backbuffer: HTMLCanvasElement;
    _damageBounds: {
        left: number;
        top: number;
        right: number;
        bottom: number;
    };
    _scale: number;
    _clipViewport: boolean;
    onflush: () => void;
    set scale(arg: number);
    get scale(): number;
    set clipViewport(arg: boolean);
    get clipViewport(): boolean;
    get width(): number;
    get height(): number;
    viewportChangePos(deltaX: any, deltaY: any): void;
    viewportChangeSize(width: any, height: any): void;
    absX(x: any): number;
    absY(y: any): number;
    resize(width: any, height: any): void;
    _damage(x: any, y: any, w: any, h: any): void;
    flip(fromQueue: any): void;
    pending(): boolean;
    flush(): void;
    fillRect(x: any, y: any, width: any, height: any, color: any, fromQueue: any): void;
    copyImage(oldX: any, oldY: any, newX: any, newY: any, w: any, h: any, fromQueue: any): void;
    imageRect(x: any, y: any, width: any, height: any, mime: any, arr: any): void;
    startTile(x: any, y: any, width: any, height: any, color: any): void;
    subTile(x: any, y: any, w: any, h: any, color: any): void;
    finishTile(): void;
    blitImage(x: any, y: any, width: any, height: any, arr: any, offset: any, fromQueue: any): void;
    blitRgbImage(x: any, y: any, width: any, height: any, arr: any, offset: any, fromQueue: any): void;
    blitRgbxImage(x: any, y: any, width: any, height: any, arr: any, offset: any, fromQueue: any): void;
    drawImage(img: any, x: any, y: any): void;
    autoscale(containerWidth: any, containerHeight: any): void;
    _rescale(factor: any): void;
    _setFillColor(color: any): void;
    _rgbImageData(x: any, y: any, width: any, height: any, arr: any, offset: any): void;
    _bgrxImageData(x: any, y: any, width: any, height: any, arr: any, offset: any): void;
    _rgbxImageData(x: any, y: any, width: any, height: any, arr: any, offset: any): void;
    _renderQPush(action: any): void;
    _resumeRenderQ(): void;
    _scanRenderQ(): void;
}
